# Flask博客系统项目规范

## 项目概述
这是一个使用Flask为核心技术开发的前后端不分离的开源博客系统，涵盖美观的后台管理界面和前台展示界面，最终通过Docker Compose自动化构建镜像的方式发布，供他人一键部署。

## 核心功能模块
1. **用户管理**：注册、登录、个人资料管理、权限控制
2. **博客文章管理**：创建、编辑、删除、发布文章
3. **分类管理**：创建、编辑、删除分类
4. **标签管理**：创建、编辑、删除标签
5. **评论管理**：支持多级评论、评论审核
6. **用户关注系统**：关注/取消关注其他用户
7. **收藏管理**：收藏/取消收藏文章

## 项目结构 
flask-blog/
├── app/ # 应用主目录
│ ├── init.py # 应用初始化
│ ├── models/ # 数据模型
│ ├── controllers/ # 控制器
│ ├── services/ # 业务逻辑
│ ├── static/ # 静态文件(CSS, JS, 图片)
│ ├── templates/ # 模板文件
│ │ ├── admin/ # 后台管理模板
│ │ └── front/ # 前台展示模板
│ ├── forms/ # 表单验证
│ └── utils/ # 工具函数
├── config.py # 配置文件
├── requirements.txt # 依赖包
├── run.py # 启动脚本
├── .env # 环境变量
├── migrations/ # 数据库迁移文件
├── tests/ # 测试代码
├── Dockerfile # Docker配置
└── docker-compose.yml # Docker Compose配置


## 技术栈
1. **后端**：
   - Flask：核心框架
   - Flask-SQLAlchemy：ORM
   - Flask-Migrate：数据库迁移
   - Flask-Login：用户认证
   - Flask-WTF：表单处理
   - Flask-Admin：后台管理界面
   - Flask-RESTful：API构建(可选)

2. **前端**：
   - Bootstrap 5：响应式UI
   - jQuery：DOM操作
   - Summernote/TinyMCE：富文本编辑器
   - Font Awesome：图标

3. **数据库**：
   - SQLite：主数据库（轻量级文件数据库）
   - Redis：缓存和会话存储

4. **部署**：
   - Docker & Docker Compose
   - Nginx：反向代理
   - Gunicorn：WSGI服务器

## 编码规范
1. 使用PEP 8风格指南
2. 类名使用驼峰命名法(CamelCase)
3. 函数和变量使用小写下划线命名法(snake_case)
4. 模块名使用小写字母
5. 常量使用大写字母
6. 每个函数和类都应有文档字符串
7. 使用类型注解提高代码可读性

## 开发流程
1. 分支管理：
   - main: 稳定版本
   - develop: 开发版本
   - feature/xxx: 新功能分支
   - bugfix/xxx: 修复分支

2. 提交规范：
   - feat: 新功能
   - fix: 修复bug
   - docs: 文档更新
   - style: 代码风格调整
   - refactor: 代码重构
   - test: 测试相关
   - chore: 构建过程或辅助工具变动

## 项目进度追踪

### 已完成功能
- [x] 项目基础结构搭建
- [x] 数据库模型设计与实现
  - [x] 用户模型(User)
  - [x] 文章模型(Post)
  - [x] 分类模型(Category)
  - [x] 标签模型(Tag)
  - [x] 评论模型(Comment)
- [x] 控制器实现
  - [x] 认证控制器(auth.py)
  - [x] 博客控制器(blog.py)
  - [x] 用户控制器(user.py)
  - [x] 管理员控制器(admin.py)
  - [x] 错误处理控制器(errors.py)
- [x] 表单实现
  - [x] 认证表单(auth.py)
  - [x] 博客表单(blog.py)
  - [x] 管理员表单(admin.py)
  - [x] 用户表单(user.py)
- [x] Docker配置
  - [x] Dockerfile
  - [x] docker-compose.yml

### 待完成功能
- [ ] 完成表单模块的其余部分
  - [ ] 管理员表单(admin.py)
  - [ ] 用户表单(user.py)
- [ ] 模板文件开发
  - [ ] 前台模板
  - [ ] 后台管理模板
- [ ] 工具函数实现
  - [x] 文件上传
  - [x] 邮件发送
  - [x] 权限装饰器
- [ ] 静态文件开发
  - [ ] CSS样式
  - [ ] JavaScript交互
- [ ] 测试用例编写
- [ ] 文档编写
- [ ] 部署脚本优化

## 注意事项
1. 每次完成功能，将已实现的目标写入本文件，以便追踪项目进度
2. 代码提交前进行自测，确保功能正常
3. 定期进行代码审查，保证代码质量
4. 保持良好的代码注释和文档更新
5. 每次在编写或修改代码之前，仔细阅读项目代码，不要遗漏要修改的地方

# Flask博客系统项目进度

## 已完成功能

### 1. 用户系统
- [x] 用户注册
- [x] 用户登录
- [x] 用户退出
- [x] 个人资料管理
  - [x] 修改基本信息
  - [x] 更换头像
  - [x] 修改密码
- [x] 密码重置功能
- [x] 用户关注/取消关注
- [x] 查看关注者和粉丝列表
- [x] 用户头像支持(本地上传和Gravatar)
- [x] 用户公开主页
- [x] 用户通知系统
- [x] 用户权限控制

### 2. 博客文章
- [x] 文章的 CRUD 操作
- [x] Markdown/富文本编辑器支持
- [x] 文章分类
- [x] 文章标签
- [x] 文章封面图片上传
- [x] 文章摘要
- [x] 文章浏览量统计
- [x] 文章发布/草稿状态
- [x] 文章收藏功能
- [x] 文章搜索功能
- [x] 相关文章推荐
- [x] 文章分页显示
- [x] 热门文章列表

### 3. 评论系统
- [x] 发表评论
- [x] 评论审核
- [x] 评论管理
- [x] 评论删除功能
- [x] 评论时间显示
- [x] 评论者头像显示
- [x] 评论通知功能

### 4. 后台管理
- [x] 仪表盘统计
- [x] 文章管理
- [x] 分类管理
- [x] 标签管理
- [x] 用户管理
- [x] 评论管理
- [x] 管理员权限控制

### 5. 其他功能
- [x] 分页
- [x] 搜索功能
- [x] 文件上传
- [x] 权限控制
- [x] 用户头像支持
- [x] 响应式界面
- [x] 热门文章推荐
- [x] 邮件通知系统
- [x] 用户设置功能
- [x] 错误页面处理(404/403/500)
- [x] 文章分类和标签云
- [x] 数据库迁移支持
- [x] Docker部署支持

### 6. 技术实现
- [x] Flask-SQLAlchemy ORM
- [x] Flask-Login 用户认证
- [x] Flask-WTF 表单处理
- [x] Flask-Mail 邮件发送
- [x] Flask-Moment 时间本地化
- [x] Bootstrap 5 响应式布局
- [x] Font Awesome 图标支持
- [x] SQLite 数据库
- [x] Jinja2 模板引擎
- [x] 文件上传和处理
- [x] 数据库关系设计

## 待完成功能

### 1. 社交功能
- [ ] 文章点赞
- [ ] 文章分享
- [ ] 文章归档
- [ ] 文章阅读时长估算
- [ ] 文章归档
- [ ] 相关文章推荐
- [ ] 用户消息通知

### 2. 增强功能
- [ ] 文章归档
- [ ] 文章统计
- [ ] 热门文章
- [ ] 相关文章推荐
- [ ] 文章阅读时长估算
- [ ] 代码高亮
- [ ] 图片懒加载

### 3. SEO优化
- [ ] 文章永久链接
- [ ] Meta标签优化
- [ ] Sitemap生成
- [ ] RSS订阅

### 4. 系统功能
- [ ] 系统设置
- [ ] 主题切换
- [ ] 缓存优化
- [ ] 日志记录
- [ ] 性能监控

### 5. 部署相关
- [ ] Docker配置
- [ ] Nginx配置
- [ ] HTTPS支持
- [ ] 数据库备份

# 待优化空间

## 功能优化
1. 文章编辑器增强
   - 图片拖拽上传
   - 代码高亮
   - 实时预览

2. 评论系统增强
   - 评论点赞
   - 评论通知
   - 评论表情支持

3. 用户系统增强
   - 第三方登录(GitHub等)
   - 邮箱验证
   - 找回密码功能
   - 用户消息通知

4. 文章系统增强
   - 文章点赞功能
   - 文章分享功能
   - 文章归档功能
   - 相关文章推荐

5. 后台管理增强
   - 数据统计面板
   - 用户管理
   - 内容审核

## 技术优化
1. 性能优化
   - 缓存优化
   - 数据库查询优化
   - 静态资源优化

2. 安全性增强
   - XSS防护
   - CSRF防护
   - SQL注入防护
   - 敏感数据加密

3. 代码质量
   - 单元测试覆盖
   - 代码重构
   - 错误处理完善
   - 日志系统完善

4. 部署优化
   - Docker容器化
   - CI/CD流程
   - 监控告警
   - 备份恢复

## 用户体验
1. 界面优化
   - 深色模式
   - 自定义主题
   - 动画效果
   - 加载状态

2. 交互优化
   - 快捷键支持
   - 无限滚动
   - 搜索建议
   - 操作提示

3. 移动端优化
   - PWA支持
   - 手势操作
   - 页面适配

# Docker 镜像构建与部署规范

## 项目目标
提供一个基于 Flask 的开源博客系统，实现一键部署功能，降低用户使用门槛。

## 核心文件说明

### 1. Dockerfile
- 基于 python:3.9-slim 镜像
- 工作目录设置为 /myblog
- 分层构建以优化镜像大小
- 包含必要的目录创建和权限设置

### 2. docker-compose.yml
- 定义完整的服务栈：web、redis、nginx
- 使用数据卷持久化数据
- 环境变量配置
- 服务依赖关系管理

### 3. docker-entrypoint.sh
- 容器启动时的初始化脚本
- 数据库迁移
- 自动创建管理员账号
- 启动应用服务

### 4. nginx.conf
- 反向代理配置
- 静态文件处理
- 上传文件目录配置

## 部署流程

### 1. 基础环境要求
- Docker Engine
- Docker Compose
- 互联网连接

### 2. 一键部署步骤
```bash
# 克隆项目
git clone https://github.com/your-username/flask-blog.git
cd flask-blog

# 启动服务
docker-compose up -d
```

### 3. 初始化命令
```bash
# 创建管理员账号
docker-compose exec web flask create-admin --auto

# 生成测试数据（可选）
docker-compose exec web flask init-data
```

## 数据持久化
- myblog-data：数据库文件
- myblog-uploads：上传的文件
- redis-data：Redis 数据

## 维护命令
```bash
# 查看日志
docker-compose logs -f

# 重启服务
docker-compose restart

# 停止服务
docker-compose down

# 清理数据（慎用）
docker-compose down -v
```

## 注意事项
1. 首次部署需要等待数据库初始化完成
2. 建议定期备份数据卷
3. 生产环境部署时注意修改密钥和邮箱配置
4. 建议使用 HTTPS 进行安全访问

## 贡献指南
1. 代码提交前进行本地测试
2. 遵循项目的代码规范
3. 编写清晰的提交信息
4. 更新相关文档

## 未来规划
1. 支持自定义主题
2. 添加更多部署选项
3. 优化性能和安全性
4. 提供更多数据库选择